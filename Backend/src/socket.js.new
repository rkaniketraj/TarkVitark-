import { Server } from 'socket.io';
import mongoose from 'mongoose';
import { DebateRoom } from './models/debateRoom.model.js';
import { User } from './models/user.model.js';
import Message from './models/message.model.js';
import jwt from 'jsonwebtoken';

let io;

export function initializeSocket(server) {
  io = new Server(server, {
    cors: {
      origin: process.env.CORS_ORIGIN || 'http://localhost:5173',
      credentials: true,
      methods: ['GET', 'POST'],
    },
  });

  // Middleware to authenticate socket connections
  io.use(async (socket, next) => {
    try {
      const token = socket.handshake.auth.token || socket.handshake.headers.authorization?.split(' ')[1];
      
      if (!token) {
        return next(new Error('Authentication required'));
      }

      const decoded = jwt.verify(token, process.env.JWT_SECRET);
      const user = await User.findById(decoded._id).select('-password');
      
      if (!user) {
        return next(new Error('User not found'));
      }

      socket.user = user;
      next();
    } catch (error) {
      next(new Error('Invalid token'));
    }
  });

  // Store active rooms and their states
  const rooms = new Map();

  io.on('connection', (socket) => {
    console.log(`User connected: ${socket.user.username}`);

    // Join a debate room
    socket.on('joinRoom', async ({ roomId }) => {
      try {
        // Check if debate room exists
        const room = await DebateRoom.findById(roomId)
          .populate('participants', 'username fullName stance')
          .lean();

        if (!room) {
          throw new Error('Debate room not found');
        }

        // Check if user is a registered participant
        const isParticipant = room.participants.some(
          (p) => p._id.toString() === socket.user._id.toString()
        );

        if (!isParticipant) {
          throw new Error('Not registered for this debate');
        }

        // Join the socket room
        socket.join(roomId);

        // Initialize room state if not exists
        if (!rooms.has(roomId)) {
          rooms.set(roomId, {
            participants: [],
            messages: [],
            lastActivity: Date.now()
          });
        }

        const roomState = rooms.get(roomId);

        // Add participant if not already in room
        if (!roomState.participants.find(p => p.userId === socket.user._id.toString())) {
          roomState.participants.push({
            socketId: socket.id,
            userId: socket.user._id.toString(),
            username: socket.user.username,
            stance: room.participants.find(p => p._id.toString() === socket.user._id.toString())?.stance
          });
        }

        // Load recent messages
        const recentMessages = await Message.find({ debateId: roomId })
          .sort({ createdAt: -1 })
          .limit(50)
          .populate('sender', 'username fullName')
          .lean();

        roomState.messages = recentMessages.reverse();

        // Emit room state to all participants
        io.to(roomId).emit('roomUpdate', {
          participants: roomState.participants
        });

        // Send message history to joining user
        socket.emit('messageHistory', roomState.messages);

      } catch (err) {
        socket.emit('error', { message: err.message || 'Error joining room' });
      }
    });

    // Handle sending messages
    socket.on('sendMessage', async (data) => {
      try {
        const { roomId, content, voiceUrl } = data;
        
        // Validate room and participation
        const room = await DebateRoom.findById(roomId);
        if (!room) {
          throw new Error('Debate room not found');
        }

        const isParticipant = room.participants.includes(socket.user._id);
        if (!isParticipant) {
          throw new Error('Not a participant in this debate');
        }

        // Create and save message
        const message = new Message({
          debateId: roomId,
          sender: socket.user._id,
          content,
          voiceUrl,
          type: voiceUrl ? 'voice' : 'text'
        });

        await message.save();

        // Add to room state and broadcast
        const roomState = rooms.get(roomId);
        if (roomState) {
          const messageObj = {
            ...message.toObject(),
            sender: {
              _id: socket.user._id,
              username: socket.user.username,
              fullName: socket.user.fullName
            }
          };

          roomState.messages.push(messageObj);
          io.to(roomId).emit('newMessage', messageObj);
        }
      } catch (err) {
        socket.emit('error', { message: err.message || 'Error sending message' });
      }
    });

    // Handle user typing status
    socket.on('typing', ({ roomId, isTyping }) => {
      io.to(roomId).emit('userTyping', {
        userId: socket.user._id,
        username: socket.user.username,
        isTyping
      });
    });

    // Handle disconnect
    socket.on('disconnecting', () => {
      socket.rooms.forEach(roomId => {
        const roomState = rooms.get(roomId);
        if (roomState) {
          roomState.participants = roomState.participants.filter(
            p => p.socketId !== socket.id
          );
          io.to(roomId).emit('roomUpdate', {
            participants: roomState.participants
          });

          // Clean up empty rooms
          if (roomState.participants.length === 0) {
            rooms.delete(roomId);
          }
        }
      });
    });

    socket.on('disconnect', () => {
      console.log(`User disconnected: ${socket.user.username}`);
    });
  });

  return io;
}
