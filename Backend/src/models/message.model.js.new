import mongoose from "mongoose";
const { Schema } = mongoose;

const messageSchema = new Schema({
  debateId: {
    type: Schema.Types.ObjectId,
    ref: 'DebateRoom',
    required: true,
    index: true
  },
  sender: {
    type: Schema.Types.ObjectId,
    ref: 'User',
    required: true,
    index: true
  },
  content: {
    type: String,
    required: function() {
      return !this.voiceUrl;
    },
    trim: true,
    maxlength: [1000, 'Message cannot exceed 1000 characters']
  },
  voiceUrl: {
    type: String,
    required: function() {
      return !this.content;
    }
  },
  type: {
    type: String,
    enum: ['text', 'voice', 'system'],
    required: true,
    default: function() {
      if (this.voiceUrl) return 'voice';
      return 'text';
    }
  },
  language: {
    type: String,
    required: true,
    default: 'en'
  },
  translations: {
    type: Map,
    of: String,
    default: () => new Map()
  },
  reactions: [{
    user: {
      type: Schema.Types.ObjectId,
      ref: 'User',
      required: true
    },
    emoji: {
      type: String,
      required: true
    },
    createdAt: {
      type: Date,
      default: Date.now
    }
  }],
  translatedText: {
    type: Map,
    of: String,
    default: () => new Map()
  },
  flagged: {
    type: Boolean,
    default: false
  },
  createdAt: {
    type: Date,
    default: Date.now
  }
}, {
  timestamps: true
});

// Indexes for efficient queries
messageSchema.index({ debateId: 1, createdAt: 1 });
messageSchema.index({ sender: 1, createdAt: -1 });
messageSchema.index({ flagged: 1 }, { sparse: true });

// Virtual field to determine message age
messageSchema.virtual('age').get(function() {
  return Date.now() - this.createdAt;
});

// Method to add translation
messageSchema.methods.addTranslation = function(langCode, text) {
  this.translatedText.set(langCode, text);
  return this.save();
};

// Pre-save middleware to validate content
messageSchema.pre('save', function(next) {
  if (!this.content && !this.voiceUrl) {
    next(new Error('Message must have either text content or voice URL'));
  }
  next();
});

// Static method to find recent messages in a debate
messageSchema.statics.findRecentByDebate = function(debateId, limit = 50) {
  return this.find({ debateId })
    .sort({ createdAt: -1 })
    .limit(limit)
    .populate('sender', 'username avatar')
    .exec();
};

const Message = mongoose.model('Message', messageSchema);
export default Message;
